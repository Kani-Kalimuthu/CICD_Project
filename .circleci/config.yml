  version: 2.1

  orbs:
    slack: circleci/slack@4.12.1

  commands:
    destroy_environment:
      steps:
        - run:
            name: Destroy environment
            # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
            # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
            when: on_fail
            command: |
              echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7} "
              aws s3 rm --recursive s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  
    revert-migrations:
      description: Revert the last migration if successfully run in the current workflow.
      parameters:
        # Add parameter here     
      steps:
        - run:
            name: Revert migrations
            # Add when this will run
            command: |
              # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
              SUCCESS = 1
              if(( $SUCCESS==1 )); 
              then
              #  cd ~/project/backend
              #  npm install
              #  Add revert code here. You can find this in the Getting Started section.
                exit 1
              fi
  jobs:
    build-frontend:
      docker:
        - image: circleci/node:14.18.1
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: frontend build
            command: |
              cd frontend
              npm i
              npm run build
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build
        - slack/notify:
            event: fail
            template: basic_fail_1
        
    build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Back-end build
            command: |
              cd backend
              npm i
              npm run build          
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build
        - slack/notify:
            event: fail
            template: basic_fail_1
    
    test-frontend:
      docker:
        - image: circleci/node:14.18.1
      steps:
        # Checkout code from git
        - checkout 
        - restore_cache:
            keys: [frontend-test] 
        # Your job code here
        - run:
            name: frontend test
            command: |
              cd frontend
              npm i
              npm run test
              npm audit fix
        - slack/notify:
            event: fail
            template: basic_fail_1
    test-backend:
      docker:
        - image: circleci/node:14.18.1
      steps:
        # Checkout code from git
        - checkout  
        - restore_cache:
            keys: [backend-test]
        # Your job code here
        - run:
            name: backend test
            command: |
              cd backend
              npm i
              npm run test
              npm audit fix
              npm audit fix --force  
        - slack/notify:
            event: fail
            template: basic_fail_1
              
    scan-frontend:
      docker:
        - image: circleci/node:14.18.1
      steps:
        # Checkout code from git
        - checkout
        - restore_cache:
            keys: [frontend-scan] # Restore from cache
        # Your job code here
        - run:
            name: frontend audit
            command: |
              cd backend
              npm i
              npm audit fix --audit-level=critical 
        - slack/notify:
            event: fail
            template: basic_fail_1

    scan-backend:
      docker:
        - image: circleci/node:14.18.1
      steps:
        # Checkout code from git
        - checkout
        - restore_cache:
            keys: [backend-scan]
        # Your job code here
        - run:
            name: backend audit 
            command: |
              cd backend
              npm i
              npm audit fix --audit-level=critical
        - slack/notify:
            event: fail
            template: basic_fail_1
    
    deploy-infrastructure:
      docker:
        - image:  amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
                  --template-file .circleci/files/backend.yml \
                  --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --tags project=udapeople \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"                  
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --tags project=udapeople \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}" \
                --output text >> .circleci/ansible/inventory.txt
                cat .circleci/ansible/inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
                - .circleci/ansible/inventory.txt
        - destroy_environment:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:5}" 
        - slack/notify:
            event: fail
            template: basic_fail_1  
    configure-infrastructure:
      docker:
        - image: python:3.11-rc-alpine
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["cf:2d:cc:22:9d:27:d3:52:fb:84:d9:40:76:8a:2c:a7"]
        # attach workspace
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible
              apk add curl
              apk add openssh-client
              pip install awscli
        - run:
            name: Configure server
            command: |
              cd .circleci/ansible 
              ansible-playbook -i inventory.txt configure-server.yml 
        - slack/notify:
            event: fail
            template: basic_fail_1 
  workflows:
    udapeople_project:
      jobs:
        #- build-frontend          
        #- build-backend            
        #- test-frontend:            
        #    requires:
        #      - build-frontend
        #- test-backend:            
        #    requires:
        #      - build-backend
        #- scan-frontend:            
        #    requires:
        #      - test-frontend
        #- scan-backend:
        #    requires:
        #      - test-backend
        #- deploy-infrastructure
          #  requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #  filters:
          #    branches:
          #      only: [test-feature-branch]
        - configure-infrastructure