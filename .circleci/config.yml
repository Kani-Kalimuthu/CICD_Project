version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-${CIRCLE_WORKFLOW_ID:0:5}
 
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend build
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build          
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
  
  test-frontend:
    docker:
      - image: circleci/node:14.18.1
    steps:
      # Checkout code from git
      - checkout 
      - restore_cache:
          keys: [frontend-test] 
      # Your job code here
      - run:
          name: frontend test
          command: |
            cd frontend
            npm i
            npm run test
            npm audit fix
      - slack/notify:
          event: fail
          template: basic_fail_1
  test-backend:
    docker:
      - image: circleci/node:14.18.1
    steps:
      # Checkout code from git
      - checkout  
      - restore_cache:
          keys: [backend-test]
      # Your job code here
      - run:
          name: backend test
          command: |
            cd backend
            npm i
            npm run test
            npm audit fix
            npm audit fix --force  
      - slack/notify:
          event: fail
          template: basic_fail_1
            
  scan-frontend:
    docker:
      - image: circleci/node:14.18.1
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-scan] # Restore from cache
      # Your job code here
      - run:
          name: frontend audit
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical 
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:14.18.1
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-scan]
      # Your job code here
      - run:
          name: backend audit 
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image:  amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID:0:5}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
                exit 1
      - persist_to_workspace:
          root: ~/
          paths:
              - project/.circleci/ansible/inventory.txt
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:5}"   

  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ea:fb:b7:a2:33:81:2b:f3:36:22:20:0f:3f:1f:68:fe"]
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            exit 1
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
            exit 1
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:5}"     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:5}"      

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      -checkout 
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # Lightweight Docker image 
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            
workflows:
  udapeople_project:
    jobs:
      - build-frontend
          context: slack-secrets
      - build-backend
          context: slack-secrets
      - test-frontend:
          context: slack-secrets
          requires:
            - build-frontend
      - test-backend:
          context: slack-secrets
          requires:
            - build-backend
      - scan-frontend:
          context: slack-secrets
          requires:
            - test-frontend
      - scan-backend:
          context: slack-secrets
          requires:
            - test-backend
  